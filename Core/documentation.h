/** @file documetation.h
    @brief <h1>Документация по тестовому проекту</h1>
	  @author <a href="mailto://acoustics@list.ru">Елизаров Евгений Анатольевич</a>
		@details
		Данный файл необходим для структурирования документации проекта
*/
/** @mainpage Оглавление
		- @ref introduction
		- @ref specification
		- @ref develop_page
		- @ref result_page
*/

/** @page introduction Введение
Данный проект создан в рамках отбора кандидатов на занятие должности 
"Инженер-программист микроконтроллеров" в компании 
<a href="https://www.ipgphotonics.com/ru/site">ИРЭ-Полюс</a>.
В рамках проекта производится проверка основных навыков кандидата,
таких как:
- знание и умение программирования на языке C;
- знание среды разработки Keil;
- знание микроконтроллеров, основанных на серии ядер Cortex-M;
- понимание работы периферии контроллеров STM32;
- знание и умение пользоваться генератором кода STM32CubeMx;
- умение документирования кода с использованием системы 
  автодокументирования DOxygen;
- умение пользоваться распределенной системой управления версиями Git.
*/

/** @page specification Техническое задание
В рамках выполнения тестового задания необходимо:
- реализовать чтение значений со входа АЦП с использованием DMA с дискретизацией 10 КГц;
- реализовать установку полученных усреднённых значений на выходе ЦАП раз в 10мсек;
- усредненное за 1сек значение выдавать по SWD интерфейсу в терминал IDE Keil.<br> 
  Полученные значения выводить в мили вольтах. <br> \
	Формат представления в ASCII кодах с символом перевода строки на конце (пример: «1500 mV\\r\\n»);
- сгенерировать проект в STM32CubeMX для среды Keil с использованием библиотек «LL» для АЦП, для остальной периферии на «HAL»;
- описание полученного кода сформировать в формате Doxygen;
- выполненый проект выложить в доступный GIT репозиторий.
*/

/** @page develop_page Разработка проекта
\image html NUCLEO_w_Shadow.jpg
Разработка проекта будет произведена на отладочной плате NUCLEO-F072RB и состоит из следующих основных этапов:
- @ref CubeMX_sec
- @ref uVision_dev_sec

@section CubeMX_sec Настройка проекта в генераторе кода STM32CubeMX
Настройка проекта в генераторе кода STM32CubeMX представляет собой настройку основных
используемых аппаратных модулей. Добавим в проект настройку вывода светодиода.
\image html GPIO_Set_w_Shadow.jpg
Светодиод подключен к выводу PA5. На этом настроку модуля GPIO можно считать законченной.<br>
Перейдем к настройке модуля тактирования RCC. 
\image html RCC_Set_w_Shadow.jpg
На плате установлен низкочастотный кварцевый резонатор 32768Гц для обеспечения работы часов реального времени. 
Высокочастотный кварцевый резонатор отсутствует. В приципе, RTC в нашем проекте отсутствует и данная настройка 
не несет в себе никакой практической пользы. Но настроим. Предположим, что при развитии проекта это может нам понадобиться.
\image html SYS_Set_w_Shadow.jpg
Разрешим подключение отладчика. Также в качестве базы для отсчетов времени используем системный таймер ядра SysTick. 
Он понадобится нам при обеспечении отладочного вывода в стандартный файл stdout.
\image html SYS_Set_w_Shadow.jpg
Переходим к настройке аналоговых модулей, используемых в проекте.
\image html ADC_Set_w_Shadow.jpg
Для ввода аналогового сигнала используем вход IN0. Настроим запуск АЦП по внешнему событию от таймера TMR2. 
Тактирование от внутеннего RC-генератора. Также настроим запуск DMA по окончанию преобразования для размещения 
результата в памяти микроконтроллера.
\image html ADC_DMA_Set_w_Shadow.jpg
На этом настройку модуля АЦП можно считать законченной. Переходим к настройке модуля ЦАП.
\image html DAC_Set_w_Shadow.jpg
У модуля ЦАП задействуем выход OUT1. На всякий случай используем выходной буфер для снижения внутреннего 
сопротивления источника сигнала.<br>
Последним модулем, включаемым в проект, будет модуль таймера TMR2. Он нужен для периодического запуска 
преобразования модуля АЦП с частотой 10кГц.
\image html TMR_Set_w_Shadow.jpg
Частота тактирования таймера - 48МГц (частота встроенного RC-генератора). Чтобы получить требуемую частоту 10кГц
необходимо входную частоту разделить на 4800. Так же для корректного запуска преобразования модулем АЦП настроим
TRGO на события Update Event.
Согласно заданию установим использование драйверов соответствующего уровня.
\image html DriverSet_w_Shadow.jpg
Запретим генерацию кода для вызова функций инициализации, сделаем это вручную и, так же, запретим создание функции main.
На этом настройку генератора кода можно считать законченной
@section uVision_dev_sec Разработка проекта в среде Keil uVision
Проект, помимо файлов драйверов уровней HAL и LL, файлов стандартной библиотеки CMSIS состоит из следующих модулей:
- @link adc.h Модуль АЦП @endlink
- @link dac.h Модуль ЦАП @endlink
- @link dma.h Модуль DMA @endlink
- @link tim.h Модуль таймера @endlink
- @link stdout.c Модуль перенаправления стандартного вывода stdout @endlink
- @link timebase.с Модуль обеспечения работы EventRecorder @endlink
- @link processor.h Модуль основной настройки проекта @endlink
*/

/** @page result_page Оценка результатов проектирования
Оценка проектирования осуществляется путем подачи на вход платы тестовых сигналов и 
оценку полученных результатов при помощи осциллографа и/или в окне Debug (printf) Viewer
@section Sine_sec Оценка работоспособности канала передачи данных с модуля АЦП на ЦАП
В данном тесте подадим на вход АЦП синусоидальный сигнал частотой 10Гц и размахом 2В.
Снимем осциллограммы сигналов.
\image html Signal_w_Shadow.jpg
На осциллограммах хорошо видно осреднение входного сигнала в течении 10мсек и условное повторение, 
с учетом данного осреднения, формы входного сигнала.
@section direct_sec Оценка точности измерения канала АЦП
В данном тесте на вход АЦП подадим сигнал постоянного тока напряжением 1В и произведем его измерение.
Снимем осциллограммы входного и выходного сигнала.
\image html Signals_1v_w_Shadow.jpg
На осциллограммах видно повтороение входного сигнала выходным. Оценим точность измерения.
\image html Dbg_out_1v_w_Shadow.jpg
Полученная величина очень близка к заданно величине 1В и погрешность, скорее всего, 
обусловлена погрешностью источника сигнала
*/